<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx"xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">
	<!--Root Context: defines shared resources visible to all other web components-->
	<!--读取数据库配置-->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations" value="classpath:config/db/mysql.properties" />
	</bean>
	<!-- dbcp配置 -->
	<bean id="MyDataSource" destroy-method="close" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${userName}" />
		<property name="password" value="${pwd}" />
		<!--initialSize: 初始化连接 初始化连接:连接池启动时创建的初始化连接数量 -->
		<property name="initialSize" value="${initialSize}" />
		<!--maxActive: 最大活动连接:连接池在同一时间能够分配的最大活动连接的数量, 如果设置为非正数则表示不限制 -->
		<property name="maxActive" value="${maxActive}" />
		<!--maxIdle: 最大空闲连接:连接池中容许保持空闲状态的最大连接数量,超过的空闲连接将被释放,如果设置为负数表示不限制 -->
		<property name="maxIdle" value="${maxIdle}" />
		<!--minIdle: 最小空闲连接:连接池中容许保持空闲状态的最小连接数量,低于这个数量将创建新的连接,如果设置为0则不创建 -->
		<property name="minIdle" value="${minIdle}" />
		<!--maxWait: 超时等待时间以毫秒为单位 6000毫秒/1000等于60秒 无限 最大等待时间:当没有可用连接时,连接池等待连接被归还的最大时间(以毫秒计数),超过时间则抛出异常,如果设置为-1表示无限等待 -->
		<property name="maxWait" value="${maxWait}" />
		<!--连接池创建的连接的默认的auto-commit状态 -->
		<property name="defaultAutoCommit" value="${defaultAutoCommit}" />
		<!-- 开启池的prepared statement 池功能 -->
		<property name="poolPreparedStatements" value="${poolPreparedStatements}" />
		<!--removeAbandoned: 是否自动回收超时连接 -->
		<property name="removeAbandoned" value="${removeAbandoned}" />
		<!--removeAbandonedTimeout: 超时时间(以秒数为单位) 失效检查线程运行时间间隔，如果小于等于 0 ，不会启动检查线程，默认 -1 -->
		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
		<!-- 大于 0 ，进行连接空闲时间判断，或为 0 ，对空闲的连接不进行验证；默认 30 分钟 -->
		<property name="minEvictableIdleTimeMillis" value="${minEvictableIdleTimeMillis}" />
		<!-- 指明是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个.注意: 设置为true后如果要生效,validationQuery参数必须设置为非空字符串 -->
		<property name="testOnBorrow" value="${testOnBorrow}" />
		<!-- 返回对象时是否进行验证，检查对象是否有效，默认为 false -->
		<property name="testOnReturn" value="${testOnReturn}" />
		<!-- 空闲时是否进行验证，检查对象是否有效，默认为 false -->
		<property name="testWhileIdle" value="${testWhileIdle}" />
		<!-- SQL查询,用来验证从连接池取出的连接,在将连接返回给调用者之前.如果指定,则查询必须是一个SQL SELECT并且必须返回至少一行记录 -->
		<property name="validationQuery" value="select * from dual" />
	</bean>	
	<!-- SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="MyDataSource" />
	</bean>	
	<!-- ScanMapperFiles -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.ailk.openplatform.mapper" />
	</bean>
	<!-- transaction Manage -->
	<bean name="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="MyDataSource"></property>
	</bean>	
	<tx:advice id="userTxAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="delete*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="insert*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="update*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="approve*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="edit*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="add*" propagation="REQUIRED" read-only="false" rollback-for="java.lang.Exception" />
			<tx:method name="find*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="get*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="select*" propagation="SUPPORTS" read-only="true" />
			<tx:method name="query*" propagation="SUPPORTS" read-only="true" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="pc" expression="execution(public * com.ailk.openplatform.*.service.interfaces.*.*(..))" />
		<aop:advisor pointcut-ref="pc" advice-ref="userTxAdvice" />
	</aop:config>		
</beans>